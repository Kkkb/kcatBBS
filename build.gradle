plugins {
    id 'java'
    // 替换了 gradle 内置的依赖管理，能利用 spring 项目本身的 maven 依赖文件
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    // 自动打包成 war 包
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'war'
    id 'idea'
}

group = 'kybmig'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

// 编译输出能显示中文
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
}

configurations {
    // 编译后热更新配置
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    // 现在都用 implementation， compile 被弃用了
    // redis 依赖
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.auth0:java-jwt:3.10.3'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.1.7.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'mysql:mysql-connector-java:8.0.17'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.0'
    // 运行时才需要，比如代码不直接 import tomcat，但是代码需要跑在 tomcat 上。
    // 就可以内置一个 tomcat，这样就能 java -jar xxx.war 就能用内置 tomcat 跑项目。
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // 编译后热更新
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // 测试才需要的依赖，打包成 war 的时候不需要
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.68'

    implementation group: 'commons-codec', name: 'commons-codec', version: '1.9'

}


// 让 idea 的输出目录和 gradle 一致，这样 idea 运行的时候就能利用 gradle 的编译。加速编译和运行速度。
idea{
    module{
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

