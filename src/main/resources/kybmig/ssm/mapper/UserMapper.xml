<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 和 java mapper 的类名一样，从包名开始打，有自动补全-->
<mapper namespace="kybmig.ssm.mapper.UserMapper">
    <!-- resultType 和 mapper 中的方法返回值一样，不能省，从包名开始打，有自动补全-->
    <!--  里面的 sql 语句，有自动补全,要配置 ide 的 datasource -->
    <select id="selectAllUser" resultType="kybmig.ssm.model.UserModel">
        SELECT * FROM ssm.user
    </select>

    <!-- 传参数方式1，直接传入一个基本类型 int，这个 int 会被绑定到 ${id} -->
    <select id="selectUser" resultType="kybmig.ssm.model.UserModel">
        SELECT * FROM ssm.user WHERE id = ${id}
    </select>

    <select id="selectOneByUsername" resultType="kybmig.ssm.model.UserModel">
        SELECT * FROM ssm.user WHERE username = #{username}
    </select>

    <!-- 传参方式2，传入一个对象。content 代表这个对象的 content 属性，注意这个对象要有 getter setter -->
    <!-- useGeneratedKeys keyProperty 当我传入一个对象的时候，这两个属性可以把数据库创建的 id 赋值给这个对象 -->
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO ssm.user (username, password, note, role, avatar, email, createdTime)
            VALUES (#{username}, #{password}, #{note}, #{role}, #{avatar}, #{email}, #{createdTime})
    </insert>
    
    <update id="updatePassword">
        UPDATE ssm.user SET password = #{password} WHERE id = #{id}
    </update>

    <delete id="deleteUser">
        DELETE FROM ssm.user WHERE id = #{id}
    </delete>

    <update id="updateUserNameAndNote">
        UPDATE ssm.user SET username = #{username}, note = #{note} WHERE id = #{id}
    </update>

    <update id="updateAvatar">
        UPDATE ssm.user SET avatar = #{avatar} WHERE id = #{id}
    </update>

    <update id="updateByAdmin">
        UPDATE ssm.user SET username = #{username}, password = #{password}, note = #{note}, role = #{role},
        avatar = #{avatar}, email = #{email}, createdTime = #{createdTime} WHERE id = #{id}
    </update>
</mapper>
